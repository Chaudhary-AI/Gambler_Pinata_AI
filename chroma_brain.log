2025-05-06 12:26:18,882 - Processed file: symbol_tracker.py with label: test_run
2025-05-06 12:26:18,892 - Saved memory block: {'filename': 'symbol_tracker.py', 'label': 'test_run', 'content': '# scripts/symbol_tracker.py\n\nimport time\nimport cv2\nimport numpy as np\nfrom PIL import ImageGrab\n\nSCATTER_TEMPLATE = "assets/scatter_template"\nSCATTER_THRESHOLD = 0.85\n\ndef capture_screen(region=None):\n    screen = ImageGrab.grab(bbox=region)\n    screen_np = np.array(screen)\n    return cv2.cvtColor(screen_np, cv2.COLOR_RGB2BGR)\n\ndef load_template(path):\n    template = cv2.imread(path, cv2.IMREAD_UNCHANGED)\n    if template is None:\n        raise FileNotFoundError(f"❌ Template not found: {path}")\n    return template\n\ndef detect_scatter_symbols():\n    screen = capture_screen()\n    template = load_template(SCATTER_TEMPLATE)\n\n    result = cv2.matchTemplate(screen, template, cv2.TM_CCOEFF_NORMED)\n    locations = np.where(result >= SCATTER_THRESHOLD)\n    count = len(zip(*locations[::-1]))  # List of match points\n\n    return count\n\ndef check_for_scatters():\n    try:\n        count = detect_scatter_symbols()\n        print(f"✨ Scatter Symbols Found: {count}")\n        return count >= 4\n    except FileNotFoundError as e:\n        print(e)\n        return False'}
